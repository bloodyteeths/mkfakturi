{
  "info": {
    "name": "MK Accounting Platform - API Test Suite",
    "description": "TST-REST-01: Comprehensive API testing collection for MK Accounting Platform\n\nThis collection tests all major API endpoints including:\n- Authentication and authorization\n- Invoice management (CRUD operations)\n- Customer management\n- Payment processing (including CPAY integration)\n- Partner/Accountant console functionality\n- XML export and UBL compliance\n- Macedonia-specific features\n\nDesigned to run with Newman in Docker environment for CI/CD integration.\n\nRequired by ROADMAP-FINAL.md Section B - TST-REST-01",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "// Set base URL if not already set",
          "if (!pm.variables.get('base_url')) {",
          "    pm.variables.set('base_url', 'http://localhost:8000');",
          "}"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Admin Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Admin login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('token');",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "    ",
                  "    // Store auth token for subsequent requests",
                  "    pm.globals.set('auth_token', response.token);",
                  "    pm.globals.set('admin_user_id', response.user.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          }
        },
        {
          "name": "Partner Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Partner login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('token');",
                  "    pm.expect(response).to.have.property('user');",
                  "    ",
                  "    // Store partner auth token",
                  "    pm.globals.set('partner_token', response.token);",
                  "    pm.globals.set('partner_user_id', response.user.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{partner_email}}\",\n    \"password\": \"{{partner_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "Customer Management",
      "item": [
        {
          "name": "Get All Customers",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Customers list retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/customers",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers"]
            }
          }
        },
        {
          "name": "Create Macedonia Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Macedonia customer created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.expect(response.data.name).to.include('Македонски');",
                  "    pm.expect(response.data.phone).to.include('+389');",
                  "    ",
                  "    // Store customer ID for subsequent tests",
                  "    pm.globals.set('test_customer_id', response.data.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Македонски Тест Клиент {{$timestamp}}\",\n    \"email\": \"test.{{$timestamp}}@macedonia.mk\",\n    \"phone\": \"+38970123456\",\n    \"tax_id\": \"MK4080003501411\",\n    \"billing_address\": {\n        \"address_street_1\": \"бул. Македонија 15\",\n        \"city\": \"Скопје\",\n        \"zip\": \"1000\",\n        \"country_id\": 134\n    }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/customers",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers"]
            }
          }
        },
        {
          "name": "Get Customer by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Customer retrieved by ID', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.expect(response.data.id).to.equal(parseInt(pm.globals.get('test_customer_id')));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/customers/{{test_customer_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "customers", "{{test_customer_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Invoice Management",
      "item": [
        {
          "name": "Get All Invoices",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invoices list retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/invoices",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "invoices"]
            }
          }
        },
        {
          "name": "Create Macedonia Invoice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Macedonia invoice created', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.expect(response.data.currency_id).to.equal(134); // MKD currency",
                  "    pm.expect(response.data.status).to.equal('DRAFT');",
                  "    ",
                  "    // Store invoice ID for subsequent tests",
                  "    pm.globals.set('test_invoice_id', response.data.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customer_id\": {{test_customer_id}},\n    \"invoice_date\": \"{{$isoTimestamp}}\",\n    \"due_date\": \"{{$isoTimestamp}}\",\n    \"currency_id\": 134,\n    \"exchange_rate\": 1,\n    \"notes\": \"API тест фактура за Македонски клиент\",\n    \"items\": [\n        {\n            \"name\": \"Консултантски услуги\",\n            \"description\": \"Професионални бизнис консултантски услуги\",\n            \"quantity\": 1,\n            \"price\": 250000,\n            \"tax_type_id\": 1\n        },\n        {\n            \"name\": \"ИТ поддршка\",\n            \"description\": \"Месечна ИТ поддршка и одржување\",\n            \"quantity\": 12,\n            \"price\": 500000,\n            \"tax_type_id\": 2\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/invoices",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "invoices"]
            }
          }
        },
        {
          "name": "Send Invoice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invoice sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.status).to.equal('SENT');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"subject\": \"Фактура за услуги - {{$timestamp}}\",\n    \"body\": \"Почитувани,\\n\\nВо прилог ја испраќаме фактурата за извршените услуги.\\n\\nСо почит,\\nМК Сметководство\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/invoices/{{test_invoice_id}}/send",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "invoices", "{{test_invoice_id}}", "send"]
            }
          }
        }
      ]
    },
    {
      "name": "Payment Processing",
      "item": [
        {
          "name": "Create Payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Payment created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('id');",
                  "    pm.expect(response.data.amount).to.be.above(0);",
                  "    ",
                  "    // Store payment ID",
                  "    pm.globals.set('test_payment_id', response.data.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"invoice_id\": {{test_invoice_id}},\n    \"amount\": 750000,\n    \"payment_date\": \"{{$isoTimestamp}}\",\n    \"payment_method_id\": 1,\n    \"reference_number\": \"PAY-MK-{{$timestamp}}\",\n    \"notes\": \"Плаќање преку банкарски трансфер\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/payments",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "payments"]
            }
          }
        },
        {
          "name": "CPAY Payment Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('CPAY payment request created', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response).to.have.property('payment_url');",
                  "        pm.expect(response).to.have.property('transaction_id');",
                  "        pm.expect(response.payment_url).to.include('cpay.com.mk');",
                  "    } else if (pm.response.code === 503) {",
                  "        pm.test('CPAY service unavailable (expected in test environment)', function () {",
                  "            pm.response.to.have.status(503);",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"invoice_id\": {{test_invoice_id}},\n    \"amount\": 150000,\n    \"currency\": \"MKD\",\n    \"customer_phone\": \"+38970123456\",\n    \"description\": \"Плаќање на фактура преку CPAY\",\n    \"bank_code\": \"250\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/payments/cpay/create",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "payments", "cpay", "create"]
            }
          }
        }
      ]
    },
    {
      "name": "Partner/Accountant Console",
      "item": [
        {
          "name": "Get Partner Companies",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Partner companies retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.be.an('array');",
                  "    ",
                  "    // Store first company ID for switching",
                  "    if (response.data.length > 0) {",
                  "        pm.globals.set('partner_company_id', response.data[0].id);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{partner_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/console/companies",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "console", "companies"]
            }
          }
        },
        {
          "name": "Switch Company Context",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Company context switched', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('company');",
                  "    pm.expect(response.company).to.have.property('id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{partner_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"company_id\": {{partner_company_id}}\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/console/switch-company",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "console", "switch-company"]
            }
          }
        },
        {
          "name": "Get Partner Stats",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Partner statistics retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('total_companies');",
                  "    pm.expect(response.data).to.have.property('total_commission');",
                  "    pm.expect(response.data).to.have.property('monthly_revenue');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{partner_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/console/stats",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "console", "stats"]
            }
          }
        }
      ]
    },
    {
      "name": "XML Export & UBL",
      "item": [
        {
          "name": "Export Invoice XML",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('XML export successful or gracefully handled', function () {",
                  "    // XML export may not be fully functional in test environment",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response).to.have.property('xml_content');",
                  "        pm.expect(response.xml_content).to.include('<?xml');",
                  "        pm.expect(response.xml_content).to.include('Invoice');",
                  "    } else if (pm.response.code === 503 || pm.response.code === 500) {",
                  "        pm.test('XML service unavailable (expected in test environment)', function () {",
                  "            pm.expect([500, 503]).to.include(pm.response.code);",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"format\": \"UBL_2_1\",\n    \"digital_signature\": true,\n    \"validate\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/invoices/{{test_invoice_id}}/export/xml",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "invoices", "{{test_invoice_id}}", "export", "xml"]
            }
          }
        },
        {
          "name": "VAT Return XML",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('VAT return generation successful or gracefully handled', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response).to.have.property('xml_content');",
                  "        pm.expect(response.xml_content).to.include('ДДВ-04');",
                  "    } else if (pm.response.code === 503 || pm.response.code === 500) {",
                  "        pm.test('VAT service unavailable (expected in test environment)', function () {",
                  "            pm.expect([500, 503]).to.include(pm.response.code);",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"period_start\": \"2025-01-01\",\n    \"period_end\": \"2025-01-31\",\n    \"format\": \"XML\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/tax/vat-return",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "tax", "vat-return"]
            }
          }
        }
      ]
    },
    {
      "name": "System Health & Monitoring",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('System health check passes', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response.status).to.equal('healthy');",
                  "    pm.expect(response).to.have.property('database');",
                  "    pm.expect(response).to.have.property('cache');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/health",
              "host": ["{{base_url}}"],
              "path": ["api", "health"]
            }
          }
        },
        {
          "name": "Performance Metrics",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Performance metrics available', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.text();",
                  "    pm.expect(response).to.include('# HELP');",
                  "    pm.expect(response).to.include('invoiceshelf_');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "text/plain",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/metrics",
              "host": ["{{base_url}}"],
              "path": ["metrics"]
            }
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "admin_email",
      "value": "admin@invoiceshelf.com",
      "type": "string"
    },
    {
      "key": "admin_password",
      "value": "password",
      "type": "string"
    },
    {
      "key": "partner_email",
      "value": "partner@accounting.mk",
      "type": "string"
    },
    {
      "key": "partner_password",
      "value": "password",
      "type": "string"
    }
  ]
}