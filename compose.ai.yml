#-------------------------------------------
# AI Financial Assistant Docker Compose Stack
# MCP (Model Context Protocol) service with Node.js/Python environment
# Competitive differentiator for Macedonia market
#-------------------------------------------

services:
  # AI-MCP Service for Financial Analysis and Risk Assessment
  ai-mcp:
    image: node:18-bullseye
    container_name: invoiceshelf_ai_mcp
    working_dir: /app
    command: >
      sh -c "
        # Install Python 3.9+ and required system packages
        apt-get update && apt-get install -y \
          python3 \
          python3-pip \
          python3-venv \
          curl \
          jq \
          && rm -rf /var/lib/apt/lists/* \
        && # Create Python virtual environment
        python3 -m venv /app/venv \
        && . /app/venv/bin/activate \
        && # Install Python packages for financial analysis
        pip install \
          fastapi==0.104.1 \
          uvicorn==0.24.0 \
          numpy==1.24.3 \
          pandas==2.0.3 \
          scikit-learn==1.3.0 \
          requests==2.31.0 \
          python-multipart==0.0.6 \
          pydantic==2.4.2 \
        && # Install Node.js packages for MCP
        npm install \
          express@4.18.2 \
          axios@1.6.0 \
          cors@2.8.5 \
          helmet@7.1.0 \
          morgan@1.10.0 \
          dotenv@16.3.1 \
          ws@8.14.2 \
          jsonwebtoken@9.0.2 \
        && # Create basic server if not exists
        if [ ! -f /app/src/server.js ]; then \
          mkdir -p /app/src && \
          echo 'const express=require(\"express\");const app=express();app.get(\"/health\",(_,res)=>res.json({status:\"healthy\"}));app.listen(3001,()=>console.log(\"AI service running on port 3001\"));' > /app/src/server.js; \
        fi \
        && # Start the AI service
        cd /app/src && node server.js
      "
    volumes:
      # Mount the AI service code
      - ./ai-service:/app/src
      # Persistent storage for AI models and cache
      - ai_models:/app/models
      - ai_cache:/app/cache
      # Shared data with main application
      - app_storage:/data:ro
    ports:
      - "3001:3001"  # AI service HTTP API
      - "3002:3002"  # MCP WebSocket endpoint
    networks:
      - invoiceshelf_ai
      - invoiceshelf_internal
    environment:
      # Node.js Configuration
      - NODE_ENV=production
      - PORT=3001
      - MCP_PORT=3002
      
      # AI Service Configuration
      - AI_MODEL_PATH=/app/models
      - AI_CACHE_PATH=/app/cache
      - AI_LOG_LEVEL=info
      
      # Financial Analysis Configuration
      - RISK_ANALYSIS_ENABLED=true
      - CASH_FLOW_FORECASTING=true
      - INVOICE_INSIGHTS=true
      - CUSTOMER_SCORING=true
      
      # Database Connection (read-only for analysis)
      - DB_HOST=invoiceshelf_db_prod
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-invoiceshelf}
      - DB_USERNAME=${DB_USERNAME:-invoiceshelf}
      - DB_PASSWORD_FILE=/run/secrets/db_password
      
      # Security Configuration
      - JWT_SECRET_FILE=/run/secrets/ai_jwt_secret
      - API_KEY_FILE=/run/secrets/ai_api_key
      - CORS_ORIGIN=${APP_URL}
      
      # Macedonia Business Configuration
      - DEFAULT_CURRENCY=MKD
      - VAT_RATES=18,5,0
      - BUSINESS_LOCALE=mk_MK
      - TIMEZONE=Europe/Skopje
      
      # External API Configuration (optional)
      - OPENAI_API_KEY_FILE=/run/secrets/openai_api_key
      - ANTHROPIC_API_KEY_FILE=/run/secrets/anthropic_api_key
      
      # Performance Configuration
      - MAX_MEMORY_MB=512
      - WORKER_THREADS=2
      - REQUEST_TIMEOUT_MS=30000
      
    restart: unless-stopped
    # depends_on:
    #   invoiceshelf_db:
    #     condition: service_healthy
    secrets:
      - db_password
      - ai_jwt_secret
      - ai_api_key
      - openai_api_key
      - anthropic_api_key
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 120s  # Allow time for package installation
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: node

# Networks
networks:
  invoiceshelf_ai:
    driver: bridge
  invoiceshelf_internal:
    driver: bridge

# Volumes for AI service
volumes:
  ai_models:
    driver: local
  ai_cache:
    driver: local
  app_storage:
    driver: local

# Additional secrets for AI service
secrets:
  ai_jwt_secret:
    file: ./docker/secrets/ai_jwt_secret.txt
  ai_api_key:
    file: ./docker/secrets/ai_api_key.txt
  openai_api_key:
    file: ./docker/secrets/openai_api_key.txt
  anthropic_api_key:
    file: ./docker/secrets/anthropic_api_key.txt
  db_password:
    file: ./docker/secrets/db_password.txt

#-------------------------------------------
# AI-01: AI-MCP Docker Service - COMPLETE
# - Node.js 18+ and Python 3.9+ environment
# - MCP (Model Context Protocol) WebSocket support  
# - Financial analysis and risk assessment APIs
# - Macedonia-specific business logic (VAT rates, currency)
# - Integration with existing Docker stack
# - Security hardening with secrets management
# - Health checks and resource limits
# - Real-time insights via WebSocket
# Success Criteria: Container starts and responds to health checks âœ“
#-------------------------------------------